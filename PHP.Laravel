1 安装composer 
      官方地址:https://www.phpcomposer.com/
      在 terminal运行以下脚本 
      <!--
      php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      php -r "if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
      php composer-setup.php
      php -r "unlink('composer-setup.php');"
      -->
2 使用composer安装Larvaer  
      composer安装包列表:https://packagist.org
      同样是在终端:php composer.phar create-project laravel/laravel
      
      //composer create-project laravel/laravel blog --prefer-dist  在blog目录下创建laravel 
      
      // cd .. 返回上一目录。    rm -r -f删除   ls 
      
      laravel框架的所有配置文件都在config目录下
      
      目录结构：
                  - app                   核心代码
                  - bootstrap             框架的启动和自动载入配置
                              - cache                 提升性能的文件，如路由和服务器缓存
                  - config                所有的配置文件
                  - database              数据库迁移文件及填充文件
                  - public                应用入口文件
                  - resources             试图文件和原生前端资源文件，以及本地化文件
                  - routes                应用定义的所有路由
                              - web.php               文件包含的路由都位于 RouteServiceProvider 所定义的 web 中间件组约束之内，因而支持 Session、CSRF 保护以及 Cookie 加密功能，如果应用无需提供无状态的、RESTful 风格的 API，那么路由基本上都要定义在 web.php 文件中
                              - api.php               文件包含的路由位于 api 中间件组约束之内，支持频率限制功能，这些路由是无状态的，所以请求通过这些路由进入应用需要通过 token 进行认证并且不能访问 Session 状态。
                              - conlose.php           文件用于定义所有基于闭包的控制台命令，每个闭包都被绑定到一个控制台命令并且允许与命令行 IO 方法进行交互，尽管这个文件并不定义 HTTP 路由，但是它定义了基于控制台的应用入口（路由）。
                              - channels.php          文件用于注册应用支持的所有事件广播频道。
                  - storage               包含了编译后的 Blade 模板、基于文件的 Session、文件缓存，以及其它由框架生成的文件，该目录被细分为成 app、framework 和 logs 子目录，app 目录用于存放应用生成的文件，framework 目录用于存放框架生成的文件和缓存，最后，logs 目录存放的是应用的日志文件。                       
                  - tests                 包含自动化测试文件，其中默认已经提供了一个开箱即用的PHPUnit 示例；每一个测试类都要以 Test 开头，你可以通过 phpunit 或 php vendor/bin/phpunit 命令来运行测试。       
                  - vender                应用所有通过 Composer 加载的依赖
                  
      
      
      
      
      
